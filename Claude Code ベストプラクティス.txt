• 1. 環境をカスタマイズする - Claude Codeを自分のプロジェクトに最適化:
◦ CLAUDE.md ファイルを作成。Claude Codeは対話開始時に自動で CLAUDE.md の内容を読み込
むため、以下の情報を記述しておくと良い 1 :
▪ よく使うBashコマンドやユーティリティ
▪ 主要なファイルや共通関数、プロジェクト独特の注意事項
▪ コーディング規約やテスト手順、リポジトリ運用ルール (ブランチ命名方針、マージ/
リベースなど)
▪ 開発環境のセットアップ手順 (例: pyenvの使用、必要なコンパイラ 等)
▪ その他プロジェクト特有の動作や警告事項、Claudeに覚えておいてほしい事項
◦ CLAUDE.md の形式に厳格な決まりはありませんが、簡潔で人間が読める形にしておくのがお
すすめ 2 。例えば、見出しと箇条書きを使ってコマンドやコード規約を整理して書くと良い
です。
◦ CLAUDE.md ファイルはプロジェクトルート（Claudeを実行するディレクトリ）に置き、Gitに
含めてチーム全員で共有するのが一般的です (機密情報を含む場合は CLAUDE.local.md とし
て.gitignoreに追加も可能) 3 。他にもモノレポの場合はサブディレクトリごとに配置した
り、ホームディレクトリ( ~/.claude/CLAUDE.md )に置いて全セッション共通設定にすることも
できます 4 。
◦ /init コマンドを実行するとClaudeが自動で雛形となる CLAUDE.md を生成してくれます
5 。
◦ 作成した CLAUDE.md は定期的に見直しチューニングしてください。 CLAUDE.md の内容は
Claudeへのプロンプトの一部になるため、通常のプロンプト同様に効果を検証しながら調整
します 6 。避けるべきパターン: 最初から大量の情報を詰め込みすぎて効果を検証しないこ
と

7

。少しずつ内容を追加し、モデルが指示に従いやすくなるか試行錯誤しましょう。

◦ 開発中に # キーを押すことでClaudeに指示を与え、その内容を自動的に該当する CLAUDE.md
に追記させることができます 8 。多くのエンジニアは作業中に頻繁に # でコマンドやスタ
イルの決まりを記録し、 CLAUDE.md を更新してチームと共有しています

9

。

◦ Anthropicでは CLAUDE.md を【5†prompt improver】ツールにかけて改善したり、
「IMPORTANT」や「YOU MUST」など強調表現を加えてモデルの遵守度を上げる工夫も行っ
ています 10 。
◦ Claude Codeが使用できるコマンドや操作はデフォルトでは制限されており、システム変更に
つながるアクション（ファイル書き込み、多くのbashコマンド、MCPツール等）は実行前に
許可を求めてきます 11 。安全のための保守的な設定ですが、プロジェクトに応じてツールの
許可リストを調整可能です

11

。例えば安全と分かっている操作や簡単に元に戻せる操作

（ファイル編集や git commit 等）は予め許可しておくと効率が上がります

12

。

▪ セッション中に許可ポップアップが出た際「Always allow」を選んで常時許可にする
▪ Claude Code起動後に /permissions コマンドで許可リストを編集する（例: Edit を
追加してファイル編集常時許可、 Bash(git commit:*) を追加して任意のGitコミット
許可等） 13
▪ 設定ファイル .claude/settings.json または ~/.claude.json を手動で編集する
（チーム共有のため前者をGit管理するのがおすすめ） 14
▪ コマンド実行時に --allowedTools フラグで一時的に許可を追加する

14

◦ GitHubを使うプロジェクトなら、公式CLIツールである gh をインストールしておきましょ
う。Claudeは gh 経由でIssue作成、PRオープン、コメント閲覧などGitHub操作が可能です
15 （未インストールでもAPI経由等で一部操作しますが、入れておくとよりスムーズに扱え
ます）。

1

• 2. Claudeにさらなるツールを与える - シェルや外部ツールと連携してClaude Codeの能力を拡張:
◦ Bash環境の活用: Claude Codeは起動したシェルの環境を継承しており、あなたのマシンに
入っているコマンドラインツールをそのまま利用できます 16 。ただしClaudeが事前知識とし
て知っているのは一般的なUnixコマンドや gh などに限られるため、自作ツールや特殊なコマ
ンドは事前に教える必要があります 16 。具体的な手順は次の通り:
1. ツール名と使い方の例をClaudeに説明する
2. --help を実行してツールのドキュメントを読ませる
3. 特によく使うツールであれば CLAUDE.md に使い方を記載する

17

◦ MCPツールの利用: Claude CodeはMCP (複数ツール連携) のサーバー・クライアント機能を備
えており、クライアント側で複数のMCPサーバーに接続して高度な外部ツールを活用できます
18 。利用方法は:
▪ プロジェクト個別の設定ファイルにMCPサーバを登録（そのディレクトリでClaude
Codeを実行した場合に利用可能）
▪ グローバル設定に登録（全プロジェクトで有効）
▪ リポジトリに .mcp.json をチェックインして共有（そのコードベースで作業する全員
が利用可能） 19 。例として、 .mcp.json にPuppeteerやSentryのサーバを追加して
おけば、チームの誰もが設定無しでそれらをClaudeから使えるようになります

20

。

▪ Tip: MCP設定がうまく動かない場合は、Claude起動時に --mcp-debug フラグを付けて
詳細ログを確認し、設定ミスを特定すると良いでしょう 21 。
◦ カスタムスラッシュコマンド: デバッグループやログ分析など繰り返し行う指示はMarkdown
ファイルにテンプレートとして保存し、リポジトリ内の .claude/commands フォルダに配置で
きます 22 。するとClaude上で / を押した際にそのコマンド名が候補に現れ、テンプレート
を即座に実行できます
せます

22

。コマンドテンプレートはGitで共有可能なのでチーム全体で使い回

22

。またテンプレート中に $ARGUMENTS と記述すれば、コマンド実行時に引数を差し

込むことも可能です

23

。

▪ 例: GitHubのIssueを取得して修正する一連の手順を自動化する fix-github-issue コ
マンドを作成し、以下のようなテンプレートを用意できます 24 :
1. gh issue view でIssue詳細を取得
2. 問題を理解する
3. 関連するファイルをコードベース内で検索
4. 必要な修正を実装
5. テストを作成・実行して修正を検証
6. Lintや型チェックを通ることを確認
7. 分かりやすいコミットメッセージを作成
8. プッシュしてPRを作成
（※GitHub関連の操作は gh CLIを使うよう明示）

25

このMarkdownファイルを .claude/commands/fix-github-issue.md として保
存すれば、Claude上で /project:fix-github-issue 1234 のようにIssue番号
を引数に与えるだけで、Issue #1234の修正タスクを自動で完了できます 26 。
個人用の便利コマンドは ~/.claude/commands に置いておけば、どのプロジェ
クトでも共通のカスタムコマンドとして利用可能です 26 。
• 3. 代表的なワークフロー - Claude Codeで多くのユーザーが成功しているパターン:
◦ 探索→計画→実装→コミット: 汎用的で多くの問題に適用できる基本ワークフローです。
1. 調査 (Explore): まずClaudeに関連するファイル・画像・URLを読ませます。ファイル
パスを指定する（例：「 logging.py を開いて」）か、一般的な指示を与える（例：
「ログ出力を扱う部分を読んで」）ことができますが、「まだコードを書かないで」
と明示することが重要です 27 。なお、この段階で複雑な問題ならサブエージェント
の活用も検討します。Claudeに対しサブエージェント（副次的な思考プロセス）を

2

使って詳細を調べさせるよう指示すると、メインのコンテキスト容量を温存しつつ疑
問点を解消できます 28 。
2. 計画 (Plan): 続いて、問題解決の方針や手順を考えさせます。キーワード「think」を
使うとClaudeが拡張思考モードに入り、通常より長時間かけてじっくり検討します
29 （「think hard」「think harder」「ultrathink」と段階を上げるほど思考に割く
予算が増えます

29

）。提示された計画が妥当なら、そのプランをドキュメントや

GitHub Issueにまとめさせて保存しておくと良いでしょう

30

。こうしておけば、後の

実装で問題が起きてもこの計画段階に立ち戻れます。
3. 実装 (Code): Claudeに計画に沿ってコードを書かせます。実装中、各ステップで解決
策が妥当かどうかClaude自身に再確認させるよう促すと、より堅実なコードになりま
す 31 。
4. コミット (Commit): 完成したコードをコミットし、プルリクエストを作成するよう依
頼します。また必要に応じて、READMEやCHANGELOGにも今回の変更内容を追記させ
ると良いでしょう 32 。
5. ★ポイント: 特にステップ1と2（調査と計画）が重要です。これらを飛ばしてしまうと
Claudeはすぐにコーディングに入ろうとします。簡単な変更ならそれでも動きます
が、複雑な課題ほど最初にコードを読ませてリサーチと計画をさせることでパフォー
マンスが大幅向上します 33 。
◦ テスト駆動開発 (TDD) ワークフロー: テストで容易に検証できる変更には、このTDDスタイル
が効果的です 34 。Claude Codeと組み合わせることでテストファーストの威力を最大化でき
ます。
1. テスト作成: 期待する入力/出力に基づき、Claudeにテストコードを書かせます。「こ
れからTDDを行う」と明言し、この段階では実装コードを書かないよう厳命してくだ
さい

35

（実装がない機能に対しClaudeが推測でモック関数等を書いてしまうのを防

ぐため）。
2. テスト実行 (Red): Claudeにテストを実行させ、まず失敗することを確認します。ここ
でも「まだ実装は書かないで」と念押しすると良いでしょう 36 。テストが意図通り失
敗（赤になる）したらOKです。
3. テストをコミット: テスト内容に問題がなければ、そのテストコードをコミットさせま
す 37 。
4. 実装 (Green): Claudeにテストを通過するコードの実装を依頼します。この際「テスト
コードは変更しないで」と指示します 37 。Claudeはコードを書き、テストを実行
し、失敗すればコードを修正して再テスト…という反復を自動で行い、全テストが通
るまで繰り返します 38 。通常、数回の反復でテストはグリーンになります。
▪ 必要に応じて、この段階で別のClaude（またはサブエージェント）に実装をレ
ビューさせ、「テストを通すためだけの不適切な実装」になっていないか
チェックさせるのも有効です 39 。
5. リファクタ & コミット: すべてのテストが通り、実装に満足できたら、Claudeにコード
をコミットさせます 39 。必要ならこの時点でリファクタリングや微調整も依頼しま
す。
6. ★ポイント: Claudeは明確な目標に向かって反復改善するのが得意です。テストケース
など期待する出力を先に与えることで、結果が出るまで試行錯誤を重ねてソリュー
ションの質を高めていきます 40 。
◦ コード実装→スクリーンショット検証ループ: UIなど視覚的な要素を伴う開発では、画面イ
メージをフィードバックに使うことで出力を磨き込めます。
1. Claudeがブラウザ画面をキャプチャできる環境を用意します（例: 【6†Puppeteer
MCPサーバ】や【7†iOS Simulator MCPサーバ】を使うか、手動でスクリーンショッ
トを撮ってClaudeに与える） 41 。
2. デザインのモック画像をClaudeに提供します。スクリーンショットをコピー&ペースト
する、画像ファイルをドラッグ&ドロップする、ファイルパスを指定する等の方法が使
えます 41 。

3

3. 「モックと同じ見た目になるようにコードを実装して、結果のスクショを撮り、差異
があれば修正して」と依頼します。Claudeはコードを書いて画面キャプチャを取得
し、モックに一致するまでこのプロセスを繰り返します 42 。
4. デザイン通りになったらClaudeにコミットさせます

43

。

5. ★ポイント: 人間と同様、Claudeも反復するほどUIの出来が良くなります。初回出力
は及第点でも、2〜3回改善すれば見違えるケースが多いです 44 。Claude自身が結果
をスクリーンショットで確認できる環境を整えることが肝心です

44

。

◦ 安全な「全自動任せ」モード (Safe YOLO): 簡単な反復作業などでは、
claude --dangerously-skip-permissions オプションで全許可をスキップし、Claudeにノン
ストップで作業させる手もあります 45 。例えば大量のLintエラー修正やボイラープレート
コード生成には有効です

46

。

▪ ただしこのモードは非常にリスキーです。Claudeにあらゆるコマンド実行を許すた
め、データ消失やシステム破壊、さらにはプロンプトインジェクション経由のデータ
流出さえ起こり得ます 47 。信頼できる安全な環境でのみ使用してください。
▪ リスク低減策として、インターネットに接続されていないコンテナ内で実行すること
が推奨されています 47 。Dockerなどで隔離環境を用意し、その中で --dangerouslyskip-permissions を使うことで被害を局所化できます（Anthropic提供のDocker Dev
Containerの【8†参考実装】があります）。
◦ コードベースQ&A: 新しいプロジェクトに参加した際は、Claudeをペアプログラマーのように
使ってコードベースを学習できます 48 。同僚に尋ねるような質問（「このプロジェクトのロ
ギングはどう実装されているの？」「新しいAPIエンドポイントの追加方法は？」など）をそ
のままClaudeに聞いてみてください 49 。Claudeは自動的にリポジトリ全体を検索し、該当
箇所を見つけて回答してくれます

49

。

▪ 例えば次のような質問が可能です

49

:

▪ 「ログ機能はどのように動作していますか？」
▪ 「新しいAPIエンドポイントを追加するには何をすればいいですか？」
▪ 「 foo.rs の134行目にある async move { ... } は何をしているのですか？」
▪ 「 CustomerOnboardingFlowImpl はどんなエッジケースを処理しています
か？」
▪ 「なぜ333行目で bar() ではなく foo() を呼んでいるのでしょう？」
▪ 「 baz.py の334行目と同じことをJavaではどのように書きますか？」
▪ AnthropicではこのQ&Aスタイルが新人エンジニアのオンボーディングの定番となって
おり、立ち上がりの時間を大幅に短縮しつつ既存メンバーへの質問負荷も減っていま
す 50 。特別なプロンプトは不要で、疑問をそのまま聞けばClaudeがコードを横断検
索して答えてくれます

50

。

◦ Git操作への活用: Claudeは多くのGit操作を自動化できます。Anthropicの多くのエンジニアは
日常的なGit操作の90%以上をClaudeに任せているほどです 51 。例えば:
▪ 履歴検索: 「v1.2.3にはどのコミットが含まれている？」「この機能の開発者は誰？」
「このAPIの設計意図は？」といった問いに対し、Claudeに「Gitログを調べて答え
て」と指示すれば、該当コミット履歴を洗い出して回答してくれます 52 。
▪ コミットメッセージ作成: Claudeは変更差分や最近の履歴を自動で参照し、関連する文
脈をすべて踏まえた適切なコミットメッセージを生成します 53 。手作業でメッセージ
を書くより統一感のある説明が得られます。
▪ 複雑な操作の補助: ファイルのリバート、リベース時の競合解消、過去コミット同士の
差分比較やパッチ適用など人手がかかるGit操作も、Claudeに任せれば順を追って安全
に実行してくれます 53 。
◦ GitHub連携: Claude CodeはGitHub上での作業自動化にも役立ちます。
▪ Pull Request作成: 「PRを作成して」と頼めば、Claudeが差分を分析し適切なタイト
ル・説明文付きでPRを作成してくれます 54 （「pr」という短縮指示にも対応）。
▪ コードレビュー指摘の反映: PRにコメントが付いたら、「レビューコメントを修正し
て」とClaudeに伝えるだけで、指摘内容をすべて修正し、コミットを追加してプッ

4

シュしてくれます

55

。必要に応じて「どのコメントにどう対処するか」細かく指示す

ることもできます。
▪ CIエラーの修正: テストやLintが失敗した場合も「ビルドエラーを直して」と依頼すれ
ば、Claudeがログを確認して原因を特定し、コードを修正・再実行して解決を図りま
す 56 。
▪ Issueの分類・トリアージ: 「オープンIssueを内容に応じて分類して」と命じれば、
Claudeが全Issueを巡回し、バグ/機能要望/質問などに分類してラベル付けしてくれま
す 57 。
▪ ※これらによりGitHub CLIのコマンドや手作業をほとんど覚えずに済み、反復作業を
自動化できます 54 58 。
◦ Jupyterノートブック対応: 研究者やデータサイエンティストはClaude CodeでJupyter
Notebook ( *.ipynb ) の読み書きも行っています 59 。Claudeはノートブック内の出力（グラ
フ画像など）を理解できるため、対話しながらデータ分析や可視化結果の検討が可能です
59 。使い方は自由ですが、VS CodeでClaude Codeとノートブックを並べて開き、Claudeに
ノートブック内容を読ませたり編集させたりする方法がおすすめです

60

。

▪ プレゼン前には「ノートブックを見栄え良く整えて」と頼むことで、コード整形やグ
ラフのスタイル調整など見た目を意識した最適化も行ってくれます 61 。「読みやす
く」「 aesthetic に」といったキーワードを加えると、単に動けば良いではなく人間が
見て理解しやすい形に仕上げてくれる傾向があります。
• 4. ワークフロー全般の最適化 - あらゆる作業で役立つヒント:
◦ 指示は具体的に伝える: 要求はできるだけ詳細かつ明確に伝えましょう。Claude Codeの成功
率は指示を具体的にすれば飛躍的に向上します
からの軌道修正も減らせます

62

62

。最初に期待をはっきり伝えることで、後

。例として、以下のような違いがあります

63

:

▪ (不十分)「foo.pyにテストを追加して」→ (具体的)「 foo.py に新しいテストケースを
1つ作成し、ユーザー未ログイン時の挙動を検証してください（モックは使用しないで
ください）」 64
▪ (不十分)「ExecutionFactoryのAPIがなぜ変なの？」→ (具体的)「ExecutionFactoryの
APIが現在の形になった経緯を知りたいので、実装当初からのGit履歴を調べてその設
計がどう決まったかまとめてください」 65
▪ (不十分)「カレンダーウィジェットを追加して」→ (具体的)「既存のウィジェット
（例: HotDogWidget.php）がどう実装されているか参考にして、月選択と前後年移動
が可能なカレンダーウィジェットを新規実装してください。既存コードで使われてい
るもの以外のライブラリは使わず、コードとUIロジックの分離など他のウィジェット
と同じパターンで構築してください」 66
▪ Claudeは曖昧な指示から推測もできますが、開発者の頭の中までは読めません。要求
を具体化するほど、期待に沿った結果になりやすいです 67 。
◦ 画像や図を活用する: Claudeはスクリーンショットや図を入力として与えると理解力を大きく
高められます 68 。有効な方法:
▪ 画面のスクリーンショットを撮り、その画像を直接ペーストする（macOSなら
cmd+ctrl+shift+4 で画面をクリップボードにコピーし、ctrl+V で貼り付け可能）
▪ 画像ファイルをチャット入力欄にドラッグ&ドロップする
▪ 画像ファイルのパスを指定して読み込ませる

69

70

70

▪ こうしたビジュアルは、UI開発でデザインモックを参照する場合や、グラフなど分析
結果を一緒に見て検討する際に特に有用です 71 。「画面は美しくしてほしい」など期
待する見た目を言語で補足するのも効果的です

71

。

◦ ファイル名やパスを明示する: プロンプト内で操作対象のファイルやフォルダ名を具体的に言
及してください。エディタのタブ補完機能を使えばリポジトリ内のパスを素早く入力できます
72 。ファイル名を指定することでClaudeは該当リソースを確実に見つけ出し、読み込みや編
集を行えます。

5

◦ 外部のURLを渡す: ClaudeにWeb上の情報を読ませたいときは、そのページのURLを貼り付け
るだけで自動取得してくれます 73 。特定ドメインのURLを頻繁に使う場合、 /permissions
でそのドメインを許可リストに追加しておけば毎回の許可確認を省略できます

74

。

◦ 早め・頻繁に軌道修正する: Shift+Tabで切替できる自動承認モードを使えばClaudeが完全自
律で進行しますが 75 、積極的に対話しながら進める方が最終結果の質が高まることが多いで
す

75

。最初にタスクを丁寧に説明するのはもちろん、途中で違和感があればすぐ介入して方

向転換させましょう

75

。軌道修正には次のような手段があります

76

:

▪ プランを確認させる: いきなり実装させず、まず解決方針のプランを提案させます。
「プランを確認するまではコードを書かないで」と明示し、納得できるプランか確認
します 77 。
▪ 途中停止 (Esc): Claudeの作業が逸れたり長すぎたりしたら、Escキーで実行を中断で
きます 78 。中断しても会話コンテキストは保持されるので、「今のアプローチではな
く○○の方法でやってみて」など追加指示を出せます。
▪ プロンプト巻き戻し: Escを素早く2回押すと会話履歴を直前のプロンプトまで巻き戻せ
ます 78 。そこでプロンプト内容を編集し、別の方向で再実行できます。この操作を繰
り返せば、過去の分岐点に遡って望む結果が出るまで試すことも可能です。
▪ 変更の取り消し: 「先ほどの変更を元に戻して」と依頼すれば、Claudeにファイル編集
等を取り消させることもできます 79 。取り消した上で別アプローチに切り替える際に
有効です。
▪ Claude Codeが初回で完璧に問題を解決することもありますが、これらの修正手段を
駆使することでより速く高品質な解決策に行き着ける可能性が高まります 80 。
◦ コンテキストを適宜クリアする: 対話が長引くと、過去の会話や読み込んだファイル内容が蓄
積され、関係ない情報までコンテキストに残ってしまいます 81 。これが原因でモデルの
フォーカスがぼやけたり性能が低下する場合もあります。タスクが一段落したら /clear コマ
ンドでコンテキストをリセットし、新しい話題に臨みましょう 81 。タスクごとの頻繁なリ
セットが効果的です。
◦ チェックリストとスクラッチパッドの活用: ステップ数が多かったり網羅的な対応が必要な大
きな課題（コードベースの大規模改修、何十件ものLintエラー修正、複雑なビルド調整など）
の際は、ClaudeにMarkdownのチェックリストや作業用メモを使わせて進行管理させると効
果的です 82 。例として、Lintエラーが大量にある場合:
1. ClaudeにLintコマンドを実行させ、出力された全エラー（ファイル名と行番号付き）
をMarkdown形式のチェックリストとして書き出させます 83 。
2. 次に「このチェックリストを上から順に処理して」と指示し、Claudeに各項目を1つず
つ修正→検証させ、直ったら項目をチェック（完了済みに）させて次に進みます
84 。
3. こうした外部の「やることリスト」を用いることで、Claudeが多数のタスクを抱えて
混乱するのを防ぎ、確実に一つずつ片付けられます。
◦ 多様な方法でデータを入力する: Claudeに大量のデータや外部情報を与える方法はいくつもあ
ります 85 :
▪ コピペで直接プロンプトに貼り付ける（最も手軽）

86

▪ シェルのパイプで渡す: 例 cat large.log \| claude とするとログの内容全体を入力
できます 86 （ログ、CSVなどに有用）
▪ Claudeに「○○コマンドを実行して必要なデータを取得して」と依頼し、Bashコマン
ドやMCPツール、カスタムコマンドで取り込ませる 87
▪ 「Xファイルを読んで」「このURLを取得して」と頼む（画像ファイルも同様に指定可
能） 87
▪ 実際にはこれらを組み合わせることが多いです。例えばログ全文をパイプで渡した
後、「関連する設定ファイルも開いてみて」とClaudeにシェル実行させて追加情報を
取り込む、といった流れが可能です 88 。

6

• 5. ヘッドレスモードでインフラ自動化 - 対話なしでClaude CodeをCI/CDに組み込む:
◦ Claude CodeにはGUIなしで実行できるヘッドレスモードがあります。CIパイプライン、プリ
コミットフック、ビルドスクリプトなど非対話型の自動化シナリオで利用できます 89 。
claude -p "プロンプト" のように使用し、 --output-format stream-json を付ければスト
リーミング形式でJSON出力も可能です 89 。
◦ ヘッドレスモードはセッション間でコンテキストが持続しない点に注意してください。同じ
ジョブ内でも毎回新規の会話として実行されるため、逐次の状態引き継ぎはできません 90 。
必要なら都度プロンプトに状況を与える工夫が要ります。
◦ Issueの自動トリアージュ: GitHub上でIssueが投稿されたときに自動でClaudeが内容を分析
し、ラベル付与やカテゴリ分けを行うようにできます 91 。実際、Claude Codeの公開リポジ
トリでは、新規Issue発生時にClaudeが中身を確認し適切なラベルを付けるBotとして動作し
ています 91 。
◦ Claudeによるリント/コードレビュー: Claude CodeをCI上で高度なリンタ/コードレビュアー
として使うことも可能です 92 。通常の静的解析ツールでは見逃す主観的なコードの問題を指
摘できます。例えば:
▪ タイポやコーディングスタイルの統一漏れ
▪ コメントが古く内容と乖離している箇所
▪ 分かりづらい関数名・変数名
▪ 潜在的なバグにつながりそうなコードパターン 等
これらをClaudeがコードを読み取って指摘してくれます

92

。CIでプルリクエストご

とに実行すれば、人間のレビューアの視点を自動化でき、コード品質向上に寄与しま
す。
• 6. 複数Claudeを使った高度なワークフロー - 並行実行で作業効率を最大化:
◦ 1人が実装・1人がレビュー (デュアルClaude): Claudeを2体以上起動し、役割分担させる戦略
です。一方にコードを書かせ、もう一方にそのコードをレビューまたはテストさせます 93 。
これは複数人でペアプロしている状況に近く、各Claudeが独立した文脈で思考できる利点が
あります。
1. まずClaude(A)にコードを書かせます 94 。
2. 別の端末かタブでClaude(B)を起動するか、同じセッションなら /clear でコンテキス
トをリセットしてから、Claude(B)にClaude(A)の書いたコードを読ませてレビューさ
せます 95 。
3. Claude(B)の指摘やテスト結果をもとに、必要ならClaude(A)（もしくは新たな
Claude(C)）にコードを修正させます 96 。
4. （応用）同様に、Claude(A)にテストを書かせ、Claude(B)にそのテストを通過する
コードを書かせる役割分担も可能です

97

。さらには、各Claudeに共有のメモ用ファ

イルを使わせ、一方が書いた内容をもう一方に読ませることで互いに情報交換させる
こともできます 97 。
5. メリット: 1体のClaudeに全工程を任せるより、複数Claudeに分担させた方が結果の質
が上がる場合があります 98 。各Claudeが別々のコンテキストで動くため、片方が見
落とした点をもう片方が補完し、バグや誤りの早期発見につながります。
◦ リポジトリ複製による並行処理: Claudeの待ち時間を有効活用するため、同じリポジトリを複
数フォルダにチェックアウトしておき、それぞれに別のClaudeセッションを走らせるという方
法があります 99 。
▪ 例えばリポジトリを3〜4つ別フォルダにクローンし
claude を起動して異なるタスクを割り当てます

101

100

、各フォルダで別々に

。これにより、あるClaudeが処

理中の間に他のClaudeで別作業を進めるといった並行作業が可能になります

102

。各

ターミナルを順番に巡回して進捗を確認し、許可プロンプトに応答することで、全体
の作業時間を短縮できます。

7

◦ Gitワークツリーの活用: 上記の複数クローンより効率的な方法として、Gitのワークツリー機能
があります 103 。1つのリポジトリで複数のブランチを同時に別ディレクトリにチェックアウ
トできる機能で、履歴は共有しつつ作業コピーは分離できるため軽量です
▪ これにより、異なるタスクを複数のClaudeで同時並行できます

105

104

。

。例: ワークツ

リーAでは認証モジュールのリファクタリングをClaudeに任せ、ワークツリーBでは無
関係な新機能開発を別のClaudeに任せる、といったように、互いに影響しない作業を
並行させられます 105 。タスクが独立していれば、各Claudeは他の進捗を待つ必要も
なく、競合も起きません。
▪ 手順:
1. git worktree add ../project-feature-a feature-a のように新しいワーク
ツリーを作成します 106 。
2. 各ワークツリーのフォルダで claude を起動します（例: cd ../projectfeature-a && claude ） 106 。
3. 必要なだけワークツリーを増やし、複数のClaudeを別ウィンドウ/タブで起動
します 106 。
4. 運用ヒント:
▪ ブランチ名やディレクトリ名にタスク内容を反映させ、どのターミナル
がどの作業か分かりやすくする 107 。
▪ ワークツリーごとに1タブ/ウィンドウの端末を用意し、混同を防ぐ
107 。
▪ MacのiTerm2を使っている場合、Claudeが入力待ちになった際に通知
を出す設定にすると便利 108 。
▪ エディタもワークツリーごとに別ウィンドウで開き、誤って他ワークツ
リーのファイルを編集しないようにする

108

。

▪ 作業終了後は git worktree remove で不要になったワークツリーを削
除し、ディレクトリを整理する 109 。
◦ ヘッドレスモード＋独自ハーネス: claude -p ... のヘッドレス実行を、スクリプトや既存パ
イプラインの中に組み込む高度な活用も可能です 110 。主に2つのパターンがあります:
1. ファンアウト (Fanning out)

: 大量のタスクを自動処理するパターンです。

111

▪ 例: フレームワークA→Bへの移行が必要なファイルが数百あるケース。
▪ まずClaudeにスクリプトを書かせ、移行対象ファイルの一覧（タスクリスト）
を生成させます 112 （「変更が必要なファイルをすべて列挙して」と依頼）。
▪ 次に、生成されたタスクリストに対して自作のループ処理で逐次Claudeをヘッ
ドレス呼び出しします 113 。例えば各ファイルに対し
claude -p "ファイルXを～に移行して。完了したらOK、失敗したらFAILと返答
して" --allowedTools Edit Bash(git commit:*) のようにコマンド実行しま
す 113 。Claudeが各タスクを実行し、成功/失敗ステータスを返すよう促しま
す。
▪ スクリプトを実行し、Claudeの出力を見ながらプロンプト文を調整して、すべ
てのタスクが期待通り完了するまで何度か試行します 114 。
2. パイプライン統合 (Pipelining)

115

: Claudeを既存のデータ処理パイプラインに組み込

むパターンです。
▪ 例: claude -p "〈プロンプト〉" --json \| 次のコマンド のようにし、
Claudeの出力を次の処理にパイプで渡します 115 。
▪ --json オプションを付ければClaudeの応答をJSON形式で取得できるので、
後続処理でのパースが容易になります 115 。あとは標準的なUnixパイプ処理と
して組み込むだけで、Claudeの知見を活かした自動化フローが実現できます。
3. どちらのケースでも、開発時は --verbose フラグを付けてClaude実行の詳細ログを見
るとデバッグに役立ちます 116 。本番運用ではverboseを切って出力をシンプルにしま
しょう

116

。

8

References: Claude Code Best Practices

1

76

63

33

など (Anthropic, 2025)

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62

63

64

65

66

67

68

69

70

71

72

73

74

75

76

77

78

79

80

81

82

83

84

85

86

87

88

89

90

91

92

93

94

95

96

97

98

99

100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115

116

Claude Code Best Practices \ Anthropic

https://www.anthropic.com/engineering/claude-code-best-practices

9

